/*	Path for this file is:	/usr/local/etc/httpd/cgi-bin/pagelab/charles/FindOligos	My stupid reminders on how to use XS:	To start, generate folder and support files     : h2xs -A -n MyModuleName	Insert code after MODULE and PACKAGE keywords:	    double		simplePower(prob, power)			double prob			double power						PREINT:			can define variables in here						CODE:			blah blah blah (c goes here)			RETVAL = blah (what will be returned)			OUTPUT:			RETVAL	Move to directory with .xs file and execute		: perl Makefile.PL	At this point, you may need to clean up Makefile:		Check and see if makefile has any lines		refering to ".AppleDouble". If so, comment them		out, with the exception of:			Makefile.PL DIR=.AppleDouble \			which should just have ".AppleDouble" deleted.	Then execute									: make -s	Find the #!@%@ .so file. It was burried in		: blib/arch/auto/MyModuleName	Make a symlink to it in the /MyModuleName folder	Add /MyModuleName to @INC EARLY in the perl code:		push @INC, "fullPathHere/MyModuleName";	Designate the module at the top of the code     : use MyModuleName;	Call subroutines with:	MyModuleName::MySubName(myarguments);		If you want to return more than one value, it seems you will need to build	the stack manually. The stack values are held in ST(0), ST(1) ... etc. To	change a value, use a call such as:	ST(i) = sv_2mortal ( newSViv( sites[i] ) );	the newSV call needs to match the type of the variable:	iv = integer value, nv = double, sv = another SV. Ints are signed 32 bit,	max value of 2,147,483,647 (not enough for the genome, but fine for ChrY!)	For strings, use: newSVPV(char* str, int len).	You then need to tell the program how many items are on the stack:	XSRETURN(max);		// where max is number of stack items.	I think the subroutine will return on this call, but am not sure.	*/#ifdef __cplusplusextern "C" {#endif#include "EXTERN.h"#include "perl.h"#include "XSUB.h"#include <math.h>#ifdef __cplusplus}#endif/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *//* XS Interface Section */MODULE = FindOligos		PACKAGE = FindOligos		PROTOTYPES: ENABLEvoid *findSts(oligoA, oligoB, template, ambiguity, minSize, maxSize)	char*	oligoA	char*	oligoB	char*	template	int		ambiguity	int		minSize	int		maxSize		PREINIT:	int len, i, max;	unsigned long sites[1000];	char*	bob = "Hello";			CODE:	max = 15;	len = strlen(template);	for (i=0; i < max; i++) {		sites[i] = 2147483647 - i;//		printf( "C: %d = %d<BR>", i, sites[i]);		ST(i) = sv_2mortal ( newSViv( sites[i] ) );	}		RETVAL = sites;	XSRETURN(max);			OUTPUT:	RETVAL		